*文末列出建议参考学习的资料，正文中的'1，代表建议参考1资料。*

### 代码习惯：

1. ​    千万不要全部代码塞到一个cpp文件中，可以在之后感到痛苦的时候看（了解一下多文件编程）'1
2. ​    用头文件加代码块的形式将代码分割，形成多个功能模块，保证可读性和便于维护性
3. ​    记得写注释，注释写在代码的上一行（比如对一个函数的注释写在函数定义的上方）。

#### 前置任务：

​    1.最好不要直接实现画线和三角形先进行第3点

​    2.**专门的变量类型**存储以下内容：

​        	颜色：Color，点坐标：Point，

​			向量：Vector（可以分别定义2,3,4维的向量），

​			三角形：Triangle      

​    3.完善一些类的定义（比如相关的函数和运算符号的重载）：

​        颜色需要参与运算，建议用类存储。同理向量也是

​    4.三角形的内部判断参考'2，

​    5.SSAA实现：[计算机图形学四：抗锯齿SSAA及MSAA算法和遮挡剔除Z-Buffer算法 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/144331249)

ps.前置任务的完成质量直接决定了之后的代码实现难度，建议多花点时间搞懂

## 光栅化立方体：

**1.定义变量类型：**

​        矩阵：Matrix，立方体（要存储8个顶点）：Cube

**2.画立方体**就是画它的6个面，所以我们需要**画它每个面上的三角形**（共12个）

**3**.为了正确的表示出立方体在相机中的呈像，并投影到屏幕上面，我们需要经过多次变换

​        **MVP变换'2：**（四维矩阵实现）

​            1.模型坐标到世界坐标（model to world）：

​                相对位置到绝对位置的变换。

​            2.世界坐标到相机坐标（world to camera）：

​                因为视角是可以变动的。

​			3.相机坐标到视野坐标（image to perspective）：

​				调用**透视除法‘5**，将相机坐标下的立方体投影到一个[-1,1]^2的正方形屏幕

（此时调用颜色深度插值**’3**，透视矫正插值，深度缓存**’4**，）

​			4.视野坐标到屏幕坐标的变换（perspective  to screen）:

​				根据给定的宽度和高度保存像素点信息到图片文件中。



参考资料：
    1.https://blog.csdn.net/chen_z_p/article/details/105352547

​    2.https://www.jianshu.com/p/09095090c07f

​    3.[[数学\] 重心坐标插值与透视校正插值 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/448575965)

​    4.[学习笔记 - 深度缓存（Z-buffering） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/466461622)

​    5.[Clip Space、NDC、Screen Space - 简书 (jianshu.com)](https://www.jianshu.com/p/4f25623366ff)



















